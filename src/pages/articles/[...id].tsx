import Box from '@mui/material/Box'
import makeStyles, { Theme } from 'core/makeStyles'
import ArticleContent, { Article } from 'containers/Articles/components/ArticleContent'
import ArticleAside from 'containers/Articles/components/ArticleAside'
import Content from 'components/Layout/Content'
import { useRouter } from 'next/router'
import MediaQuery from 'components/MediaQuery'
import Head from 'next/head'
import type {
	GetServerSidePropsContext,
	GetStaticPathsContext,
	GetStaticPropsContext
} from 'next'
import { getArticle } from 'containers/Articles/api'
import { dispatch } from '@/src/store'
import isUndefined from 'lodash/isUndefined'
import { changeArticle } from 'containers/Articles/slice'
import { useEffect } from 'react'
import axios from 'axios'
import { dehydrate, QueryClient } from '@tanstack/react-query'
import { ARTICLE_QUERY_KEY, useGetArticleQuery } from 'containers/Articles/queries'

interface ArticlePageProps {
	article: Article
}

const useStyles = makeStyles(
	(theme: Theme) => ({
		root: {
			padding: theme.spacing(2),
			backgroundColor: theme.colorPalette.background.secondary
		},
		content: {
			display: 'flex',
			marginTop: theme.spacing(11),
			justifyContent: 'space-between',
			[theme.breakpoints.down('md')]: {
				marginTop: theme.spacing(8),
				padding: 0
			}
		},
		articleContent: {
			marginRight: theme.spacing(2),
			flex: 1,
			[theme.breakpoints.down('md')]: {
				margin: 0
			}
		},
		aside: {
			width: 275
		}
	}),
	'Articles'
)

function ArticlesPage({ article }: ArticlePageProps) {
	const classes = useStyles()
	const history = useRouter()



	return (
		<Box className={classes.root}>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<Content className={classes.content}>
				<ArticleContent className={classes.articleContent} />
				<MediaQuery media="pc">
					<ArticleAside className={classes.aside} />
				</MediaQuery>
			</Content>
			{/*<DynamicParticleClock width={500} height={500} />*/}
		</Box>
	)
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const id = context.params?.id as string

	if (isUndefined(id)) {
		return {
			props: {
				article: {}
			}
		}
	}

	const queryClient = new QueryClient()
	await queryClient.prefetchQuery({
		queryKey: [ARTICLE_QUERY_KEY.GET],
		queryFn: () => getArticle(id)
	})

	return {
		props: {
			dehydratedState: dehydrate(queryClient),
		}
	}
}

export default ArticlesPage
